<?php

/**
 * @file
 * Contains html_page.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use \Drupal\views\ViewExecutable;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;


/**
 * Implements hook_help().
 */
function commande_management_management_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        // Main module help for the html_page module.
        case 'help.page.commande_management':
            $output = '';
            $output .= '<h3>' . t('commande_management') . '</h3>';
            $output .= '<p>' . t('commande_management system') . '</p>';
            return $output;
        default:
    }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commande_management_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
      // Get the current path.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($current_path_alias == '/admin/commandes' && $form_id == "views_exposed_form") {
      $form['field_date_value']['#required'] = true;    
  }

 
}


/**
 * Implements hook_views_pre_view(().
 */
function commande_management_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'mes_commandes' && $display_id == 'page_1') {
    $filters = $view->getDisplay()->getOption('filters'); 
    $filters['field_date_value']['value']['value'] = date('Y')."-01-01";
    $view->display_handler->overrideOption('filters', $filters);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function commande_management_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  switch($view->storage->id()){
    case 'mes_commandes';
    $query->addField('node_field_data', 'nid', '', ['function' => 'groupby']);
    $query->addGroupBy('node_field_data.nid');
    break;

  }
  
}

/**
 * Deletes all nodes of a specific content type.
 */
function __update_all_commande_nodes($start, $end) {

  $node_type = 'commande';
  $query = \Drupal::entityQuery('node')
    ->condition('type', $node_type)
    ->range(0, $end)
    ->sort('nid', 'DESC');
  $nids = $query->execute();
  $para_service =  \Drupal::entityTypeManager()->getStorage('paragraph');
  $node_service = \Drupal::entityTypeManager()->getStorage('node');
  $parser = \Drupal::service('entity_parser.manager');
  kint(sizeof($nids));
  if (!empty($nids)) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
            kint($node->id());
            $fields = $node->get('field_articles')->getValue();
            $para_news = [];
             foreach ($fields as $key => $field_item) {
                $para = $para_service->load($field_item['target_id']);
                $node_article = $parser->node_parser($para->field_article->target_id);
                $para->field_prix_d_achat->value = $node_article['field_prix_d_achat'];
                $para->field_prix_unitaire->value = $node_article['field_prix_unitaire'];
                $status = $para->save();
            }
    }
  }else{

  }
  die();
 
}

