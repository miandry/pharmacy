<?php

use Drupal\Core\Entity\EntityInterface;
/**
 * Implements hook_ENTITY_TYPE_update() for nodes.
 */
function dashboard_node_update(EntityInterface $entity) {
    // Check if the field you're interested in has been updated.
    //$original = $entity->original ;
    //if ($original->get('field_prix_unitaire')->value != $entity->get('field_prix_unitaire')->value) {
      // Create a new revision.
    //  $entity->setNewRevision(TRUE);
    //  $entity->setRevisionCreationTime(REQUEST_TIME);
    //  $entity->setRevisionUserId(\Drupal::currentUser()->id());
      // Set a revision log message.
      //$entity->setRevisionLogMessage('Prix vente est modifie.');
     // $entity->save();
     //kint($original->get('field_prix_unitaire')->value);
     //kint($entity->get('field_prix_unitaire')->value);
     //die();
   //}
  }
  /**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function dashboard_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($current_path_alias == '/stockbas') {
    $service = \Drupal::service('dashboard.manager');
    $variables["getStockBas"] = array_values($service->getQueryStockBas());
    $variables['#cache']['max-age'] = 0;
    
  }
}

/**
 * Implements hook_theme().
 */
function dashboard_theme($existing, $type, $theme, $path) {
  return [
    'dashboard_form_template' => [
      'render element' => 'form',
      'template' => 'dashboard-form-template',
    ],
  ];
}
