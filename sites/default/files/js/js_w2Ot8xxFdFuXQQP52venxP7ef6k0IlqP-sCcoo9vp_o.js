/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, once) {
  var deprecatedMessageSuffix = "is deprecated in Drupal 9.3.0 and will be removed in Drupal 10.0.0. Use the core/once library instead. See https://www.drupal.org/node/3158256";
  var originalJQOnce = $.fn.once;
  var originalJQRemoveOnce = $.fn.removeOnce;
  $.fn.once = function jQueryOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.once() ".concat(deprecatedMessageSuffix)
    });
    return originalJQOnce.apply(this, [id]);
  };
  $.fn.removeOnce = function jQueryRemoveOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.removeOnce() ".concat(deprecatedMessageSuffix)
    });
    return originalJQRemoveOnce.apply(this, [id]);
  };
  var drupalOnce = once;
  function augmentedOnce(id, selector, context) {
    originalJQOnce.apply($(selector, context), [id]);
    return drupalOnce(id, selector, context);
  }
  function remove(id, selector, context) {
    originalJQRemoveOnce.apply($(selector, context), [id]);
    return drupalOnce.remove(id, selector, context);
  }
  window.once = Object.assign(augmentedOnce, drupalOnce, {
    remove: remove
  });
})(jQuery, once);;
/**
 * @file
 * Provides stripe attachment logic.
 */

(function ($, window, Drupal, drupalSettings, Stripe) {

  'use strict';

  var stripe = null;

  Drupal.theme.stripeSucceeded = function (str) {
    return '<div class="stripe messages messages--status">' + Drupal.checkPlain(str) + '</div>';
  };

  // Argument passed from InvokeCommand.
  $.fn.stripeUpdatePaymentIntent = function(argument) {
    // Set textfield's
    // value to the passed arguments.
    var $element = $('[data-drupal-stripe-trigger="' + argument.trigger + '"]');
    var $form = $element.closest('form');
    if (argument.error) {
      $form.trigger('stripe:submit');
      return;
    }
    var elementData = $element.data('drupal-stripe-initialized');
    if (elementData) {
      var client_secret = $element.find('.drupal-stripe-client-secret').val();

      if (elementData.type == 'card') {
        stripe.confirmCardPayment(client_secret, {
          payment_method: {
            card: elementData.element,
            billing_details: argument.billing_details
          }
        })
        .then(function(result) {
          if (result.error) {
            // Show error to your customer
            $element.trigger('stripe:error', result.error.message);
          } else {
            // Send the token to your server
            $form.trigger('stripe:submit');
          }
        });
      }

      if (elementData.type == 'paymentrequest') {
        var paymentRequest = elementData.options.paymentRequest;
        if (argument.total) {
          paymentRequest.update({total: argument.total});
        }
        paymentRequest.show();
      }
    }
  };

  /**
   * Attaches the behavior for the card element
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   */
  Drupal.behaviors.stripe = {
    attach: function (context, settings) {

      // Create a Stripe client
      if (drupalSettings.stripe && drupalSettings.stripe.apiKey && !stripe) {
        stripe = Stripe(drupalSettings.stripe.apiKey);
      }

      // Stripe was not initialized, do nothing.
      if (!stripe) {
        return;
      }
      for (var base in settings.stripe.elements) {
        var $element = $('#' + base, context);
        if (!$element.length) {
          continue;
        }

        // Only process each element once
        if ($element.data('drupal-stripe-initialized')) {
          continue;
        }
        // Isolate each iteration of the for loop above for this one stripe
        // element
        (function ($element, elementSettings) {
          var $form = $element.closest('form');

          // Adding a stripe processing class using our custom events
          $form.on('stripe:submit:start', function(e) {
            $(this).addClass('stripe-processing');
          });

          $form.on('stripe:submit:stop', function(e) {
            $(this).removeClass('stripe-processing');
          });

          var client_secret = $element.find('.drupal-stripe-client-secret').val();
          var $payment_intent = $element.find('.drupal-stripe-payment-intent');

          if ($payment_intent.data('payment-intent-status') == 'succeeded') {
            $element.after(Drupal.theme('stripeSucceeded', 'You have already been charged, please submit the rest of the form.'));
            return;
          }

          // Create an instance of Elements
          var elements = stripe.elements();

          var stripeElementOptions = {};

          // Allow other modules to change these options
          $element.trigger('stripe:element:create', {
            type: elementSettings.type,
            stripe: stripe,
            elements: elements,
            options: stripeElementOptions
          });

          var stripeElement = {};

          if (elementSettings.type == 'card') {
            // Create an instance of the card Element
            stripeElement = elements.create('card', stripeElementOptions);

            // Add an instance of the card Element into the `card-element` <div>
            stripeElement.mount($element.find('.drupal-stripe-element')[0]);

            // Handle real-time validation errors from the card Element.
            stripeElement.on('change', function(event) {
              $element.trigger('stripe:error', event.error ? event.error.message : "");
            });
          }

          if (elementSettings.type == 'paymentrequest') {

            var paymentRequest = stripe.paymentRequest({
              country: elementSettings.country,
              currency: elementSettings.currency,
              total: {
                label: elementSettings.label,
                amount: elementSettings.amount,
              },
              requestPayerName: true,
              requestPayerEmail: true,
            });

            stripeElementOptions.paymentRequest = paymentRequest;

            // Create an instance of the PaymentRequest Element
            stripeElement = elements.create('paymentRequestButton', stripeElementOptions);

            // Check the availability of the Payment Request API first.
            paymentRequest.canMakePayment().then(function($element, result) {
              if (result) {
                var $form = $element.closest('form');
                stripeElement.mount($element.find('.drupal-stripe-element')[0]);

                stripeElement.on('click', function(event) {
                  event.preventDefault();
                  if (HTMLFormElement.prototype.reportValidity) {
                    if (!$form[0].reportValidity()) {
                      return false;
                    }
                  }
                  $form.trigger('stripe:submit:start');

                  var ajaxId = new Date().getTime();
                  $element.attr('data-drupal-stripe-trigger', ajaxId);
                  $element.find('.drupal-stripe-trigger').val(ajaxId);

                  var formValues = $form.find(':input').not('.drupal-stripe-trigger, input[name="form_build_id"]').serialize();
                  $form.attr('data-stripe-form-submit-last', formValues);

                  $element.find('.drupal-stripe-update').trigger('mousedown');
                });
              } else {
                $element.parent('.form-type-stripe-paymentrequest').hide();
              }
            }.bind(null, $element));

            paymentRequest.on('cancel', function() {
              $form.trigger('stripe:submit:stop');
            });

            paymentRequest.on('paymentmethod', function(ev) {
              // Confirm the PaymentIntent without handling potential next actions (yet).
              stripe.confirmCardPayment(
                client_secret,
                {payment_method: ev.paymentMethod.id},
                {handleActions: false}
              ).then(function(confirmResult) {
                if (confirmResult.error) {
                  // Report to the browser that the payment failed, prompting it to
                  // re-show the payment interface, or show an error message and close
                  // the payment interface.
                  $element.trigger('stripe:error', confirmResult.error.message);
                  ev.complete('fail');
                  $form.trigger('stripe:submit:stop');
                } else {
                  // Report to the browser that the confirmation was successful, prompting
                  // it to close the browser payment method collection interface.
                  ev.complete('success');
                  // Check if the PaymentIntent requires any actions and if so let Stripe.js
                  // handle the flow. If using an API version older than "2019-02-11" instead
                  // instead check for: `paymentIntent.status === "requires_source_action"`.
                  if (confirmResult.paymentIntent.status === "requires_action") {
                    // Let Stripe.js handle the rest of the payment flow.
                    stripe.confirmCardPayment(client_secret).then(function(result) {
                      if (result.error) {
                        $element.trigger('stripe:error', result.error.message);
                        // The payment failed -- ask your customer for a new payment method.
                      } else {
                        // The payment has succeeded.
                        $form.trigger('stripe:submit');
                      }
                    });
                  } else {
                    // The payment has succeeded.
                    $form.trigger('stripe:submit');
                  }
                }
              });
            });

          }

          // Allow other modules to act on the element created
          var eventData = {
            type: elementSettings.type,
            stripe: stripe,
            elements: elements,
            options: stripeElementOptions,
            element: stripeElement,
            settings: elementSettings
          };
          $element.trigger('stripe:element:created', eventData);

          $element.data('drupal-stripe-initialized', eventData);
          $form.data('drupal-stripe-element-' + elementSettings.type, $element);

          $element.bind('stripe:error', function(event, text) {
            var displayError = $element.find('.drupal-stripe-errors')[0];
            $form.removeAttr('data-stripe-form-submit-last');
            $form.trigger('stripe:submit:stop');
            displayError.textContent = text;
          })

          $form.once('drupal-stripe-submit-click').find(':submit').click(function(event) {
            var $element = $(event.currentTarget);
            var $form = $element.closest('form');

            if (HTMLFormElement.prototype.reportValidity) {
              if (!$form[0].reportValidity()) {
                return true;
              }
            }

            if ($form.data('drupal-stripe-submit')) {
              $form.data('drupal-stripe-submit', false);
              // We were told to submit, at this point form should validate
              // and the card has been sucessfully charged.
              return true;
            }

            event.preventDefault();

            var formValues = $form.find(':input').not('.drupal-stripe-trigger, input[name="form_build_id"]').serialize();
            var previousValues = $form.attr('data-stripe-form-submit-last');

            // event.currentTarget.submit();
            // @TODO: Check if this is actually necessary.
            // Using the same approach as drupal own double submit prevention
            // @see core/drupal.form
            if (previousValues !== formValues) {
              $form.attr('data-stripe-form-submit-last', formValues);

              $form.trigger('stripe:submit:start');

              var $element = $form.data('drupal-stripe-element-card');
              var ajaxId = new Date().getTime();
              $element.attr('data-drupal-stripe-trigger', ajaxId);
              $element.find('.drupal-stripe-trigger').val(ajaxId);
              $element.find('.drupal-stripe-update').trigger('mousedown');

              // $form.trigger('submit', [true]);
            }
            else {
              console.log('Prevent double submit');
            }
          });

          $form.once('drupal-stripe-submit').on('stripe:submit', function(event) {
            var $form = $(this);

            // Tell our click handler to allow normal submission
            $form.data('drupal-stripe-submit', true);

            // Attempt to find the proper submit button
            var $submit = $();
            // Look first in the element selector, if any
            if (elementSettings.submit_selector) {
              for (var i in elementSettings.submit_selector) {
                var selector = elementSettings.submit_selector[i];
                $submit = $form.find(selector);
                if ($submit.length) {
                  break;
                }
              }
            }
            // Otherwise look for a .js-stripe-submit class, which is another
            // mean of flagging the default submit button.
            if (!$submit.length) {
              $form.find('.js-stripe-submit');
            }
            // And fallback to the first submit button available in the form
            // making sure it's not the stripe's ajax update one.
            if (!$submit.length) {
              $submit = $form.find('.js-form-submit:not(.drupal-stripe-update)');
            }

            // There should always be one, but just in case make sure we click
            // the first one.
            $submit.first().trigger('click');
          });

        })($element, settings.stripe.elements[base]);
      }
    }
  };

})(jQuery, window, Drupal, drupalSettings, Stripe);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  Drupal.theme.checkbox = function () {
    return '<input type="checkbox" class="form-checkbox form-boolean form-boolean--type-checkbox"/>';
  };
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  Drupal.olivero = {};
  function isDesktopNav() {
    var navButtons = document.querySelector('[data-drupal-selector="mobile-buttons"]');
    return navButtons ? window.getComputedStyle(navButtons).getPropertyValue('display') === 'none' : false;
  }
  Drupal.olivero.isDesktopNav = isDesktopNav;
  var stickyHeaderToggleButton = document.querySelector('[data-drupal-selector="sticky-header-toggle"]');
  var siteHeaderFixable = document.querySelector('[data-drupal-selector="site-header-fixable"]');
  function stickyHeaderIsEnabled() {
    return stickyHeaderToggleButton.getAttribute('aria-checked') === 'true';
  }
  function setStickyHeaderStorage(expandedState) {
    var now = new Date();
    var item = {
      value: expandedState,
      expiry: now.getTime() + 20160000
    };
    localStorage.setItem('Drupal.olivero.stickyHeaderState', JSON.stringify(item));
  }
  function toggleStickyHeaderState(pinnedState) {
    if (isDesktopNav()) {
      if (pinnedState === true) {
        siteHeaderFixable.classList.add('is-expanded');
      } else {
        siteHeaderFixable.classList.remove('is-expanded');
      }
      stickyHeaderToggleButton.setAttribute('aria-checked', pinnedState);
      setStickyHeaderStorage(pinnedState);
    }
  }
  function getStickyHeaderStorage() {
    var stickyHeaderState = localStorage.getItem('Drupal.olivero.stickyHeaderState');
    if (!stickyHeaderState) return false;
    var item = JSON.parse(stickyHeaderState);
    var now = new Date();
    if (now.getTime() > item.expiry) {
      localStorage.removeItem('Drupal.olivero.stickyHeaderState');
      return false;
    }
    return item.value;
  }
  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
    var fixableElements = document.querySelectorAll('[data-drupal-selector="site-header-fixable"], [data-drupal-selector="social-bar-inner"]');
    function toggleDesktopNavVisibility(entries) {
      if (!isDesktopNav()) return;
      entries.forEach(function (entry) {
        if (entry.intersectionRatio < 1) {
          fixableElements.forEach(function (el) {
            return el.classList.add('is-fixed');
          });
        } else {
          fixableElements.forEach(function (el) {
            return el.classList.remove('is-fixed');
          });
        }
      });
    }
    function getRootMargin() {
      var rootMarginTop = 72;
      var _document = document,
        body = _document.body;
      if (body.classList.contains('toolbar-fixed')) {
        rootMarginTop -= 39;
      }
      if (body.classList.contains('toolbar-horizontal') && body.classList.contains('toolbar-tray-open')) {
        rootMarginTop -= 40;
      }
      return "".concat(rootMarginTop, "px 0px 0px 0px");
    }
    function monitorNavPosition() {
      var primaryNav = document.querySelector('[data-drupal-selector="site-header"]');
      var options = {
        rootMargin: getRootMargin(),
        threshold: [0.999, 1]
      };
      var observer = new IntersectionObserver(toggleDesktopNavVisibility, options);
      if (primaryNav) {
        observer.observe(primaryNav);
      }
    }
    if (stickyHeaderToggleButton) {
      stickyHeaderToggleButton.addEventListener('click', function () {
        toggleStickyHeaderState(!stickyHeaderIsEnabled());
      });
    }
    var siteHeaderInner = document.querySelector('[data-drupal-selector="site-header-inner"]');
    if (siteHeaderInner) {
      siteHeaderInner.addEventListener('focusin', function () {
        if (isDesktopNav() && !stickyHeaderIsEnabled()) {
          var header = document.querySelector('[data-drupal-selector="site-header"]');
          var headerNav = header.querySelector('[data-drupal-selector="header-nav"]');
          var headerMargin = header.clientHeight - headerNav.clientHeight;
          if (window.scrollY > headerMargin) {
            window.scrollTo(0, headerMargin);
          }
        }
      });
    }
    monitorNavPosition();
    setStickyHeaderStorage(getStickyHeaderStorage());
    toggleStickyHeaderState(getStickyHeaderStorage());
  }
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  var searchWideButtonSelector = '[data-drupal-selector="block-search-wide-button"]';
  var searchWideButton = document.querySelector(searchWideButtonSelector);
  var searchWideWrapperSelector = '[data-drupal-selector="block-search-wide-wrapper"]';
  var searchWideWrapper = document.querySelector(searchWideWrapperSelector);
  function searchIsVisible() {
    return searchWideWrapper.classList.contains('is-active');
  }
  Drupal.olivero.searchIsVisible = searchIsVisible;
  function watchForClickOut(e) {
    var clickInSearchArea = e.target.matches("\n      ".concat(searchWideWrapperSelector, ",\n      ").concat(searchWideWrapperSelector, " *,\n      ").concat(searchWideButtonSelector, ",\n      ").concat(searchWideButtonSelector, " *\n    "));
    if (!clickInSearchArea && searchIsVisible()) {
      toggleSearchVisibility(false);
    }
  }
  function watchForFocusOut(e) {
    if (e.relatedTarget) {
      var inSearchBar = e.relatedTarget.matches("".concat(searchWideWrapperSelector, ", ").concat(searchWideWrapperSelector, " *"));
      var inSearchButton = e.relatedTarget.matches("".concat(searchWideButtonSelector, ", ").concat(searchWideButtonSelector, " *"));
      if (!inSearchBar && !inSearchButton) {
        toggleSearchVisibility(false);
      }
    }
  }
  function watchForEscapeOut(e) {
    if (e.key === 'Escape' || e.key === 'Esc') {
      toggleSearchVisibility(false);
    }
  }
  function handleFocus() {
    if (searchIsVisible()) {
      searchWideWrapper.querySelector('input[type="search"]').focus();
    } else if (searchWideWrapper.contains(document.activeElement)) {
      searchWideButton.focus();
    }
  }
  function toggleSearchVisibility(visibility) {
    searchWideButton.setAttribute('aria-expanded', visibility === true);
    searchWideWrapper.addEventListener('transitionend', handleFocus, {
      once: true
    });
    if (visibility === true) {
      Drupal.olivero.closeAllSubNav();
      searchWideWrapper.classList.add('is-active');
      document.addEventListener('click', watchForClickOut, {
        capture: true
      });
      document.addEventListener('focusout', watchForFocusOut, {
        capture: true
      });
      document.addEventListener('keyup', watchForEscapeOut, {
        capture: true
      });
    } else {
      searchWideWrapper.classList.remove('is-active');
      document.removeEventListener('click', watchForClickOut, {
        capture: true
      });
      document.removeEventListener('focusout', watchForFocusOut, {
        capture: true
      });
      document.removeEventListener('keyup', watchForEscapeOut, {
        capture: true
      });
    }
  }
  Drupal.olivero.toggleSearchVisibility = toggleSearchVisibility;
  Drupal.behaviors.searchWide = {
    attach: function attach(context) {
      var searchWideButtonEl = once('search-wide', searchWideButtonSelector, context).shift();
      if (searchWideButtonEl) {
        searchWideButtonEl.setAttribute('aria-expanded', searchIsVisible());
        searchWideButtonEl.addEventListener('click', function () {
          toggleSearchVisibility(!searchIsVisible());
        });
      }
    }
  };
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal, once, tabbable) {
  function isNavOpen(navWrapper) {
    return navWrapper.classList.contains('is-active');
  }
  function toggleNav(props, state) {
    var value = !!state;
    props.navButton.setAttribute('aria-expanded', value);
    if (value) {
      props.body.classList.add('is-overlay-active');
      props.body.classList.add('is-fixed');
      props.navWrapper.classList.add('is-active');
    } else {
      props.body.classList.remove('is-overlay-active');
      props.body.classList.remove('is-fixed');
      props.navWrapper.classList.remove('is-active');
    }
  }
  function init(props) {
    props.navButton.setAttribute('aria-controls', props.navWrapperId);
    props.navButton.setAttribute('aria-expanded', 'false');
    props.navButton.addEventListener('click', function () {
      toggleNav(props, !isNavOpen(props.navWrapper));
    });
    document.addEventListener('keyup', function (e) {
      if (e.key === 'Escape' || e.key === 'Esc') {
        if (props.olivero.areAnySubNavsOpen()) {
          props.olivero.closeAllSubNav();
        } else {
          toggleNav(props, false);
        }
      }
    });
    props.overlay.addEventListener('click', function () {
      toggleNav(props, false);
    });
    props.overlay.addEventListener('touchstart', function () {
      toggleNav(props, false);
    });
    props.header.addEventListener('keydown', function (e) {
      if (e.key === 'Tab' && isNavOpen(props.navWrapper)) {
        var tabbableNavElements = tabbable.tabbable(props.navWrapper);
        tabbableNavElements.unshift(props.navButton);
        var firstTabbableEl = tabbableNavElements[0];
        var lastTabbableEl = tabbableNavElements[tabbableNavElements.length - 1];
        if (e.shiftKey) {
          if (document.activeElement === firstTabbableEl && !props.olivero.isDesktopNav()) {
            lastTabbableEl.focus();
            e.preventDefault();
          }
        } else if (document.activeElement === lastTabbableEl && !props.olivero.isDesktopNav()) {
          firstTabbableEl.focus();
          e.preventDefault();
        }
      }
    });
    window.addEventListener('resize', function () {
      if (props.olivero.isDesktopNav()) {
        toggleNav(props, false);
        props.body.classList.remove('is-overlay-active');
        props.body.classList.remove('is-fixed');
      }
      Drupal.olivero.closeAllSubNav();
    });
    props.navWrapper.addEventListener('click', function (e) {
      if (e.target.matches("[href*=\"".concat(window.location.pathname, "#\"], [href*=\"").concat(window.location.pathname, "#\"] *, [href^=\"#\"], [href^=\"#\"] *"))) {
        toggleNav(props, false);
      }
    });
  }
  Drupal.behaviors.oliveroNavigation = {
    attach: function attach(context) {
      var headerId = 'header';
      var header = once('navigation', "#".concat(headerId), context).shift();
      var navWrapperId = 'header-nav';
      if (header) {
        var navWrapper = header.querySelector("#".concat(navWrapperId));
        var olivero = Drupal.olivero;
        var navButton = context.querySelector('[data-drupal-selector="mobile-nav-button"]');
        var body = document.body;
        var overlay = context.querySelector('[data-drupal-selector="header-nav-overlay"]');
        init({
          olivero: olivero,
          header: header,
          navWrapperId: navWrapperId,
          navWrapper: navWrapper,
          navButton: navButton,
          body: body,
          overlay: overlay
        });
      }
    }
  };
})(Drupal, once, tabbable);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal) {
  var isDesktopNav = Drupal.olivero.isDesktopNav;
  var secondLevelNavMenus = document.querySelectorAll('[data-drupal-selector="primary-nav-menu-item-has-children"]');
  function toggleSubNav(topLevelMenuItem, toState) {
    var buttonSelector = '[data-drupal-selector="primary-nav-submenu-toggle-button"]';
    var button = topLevelMenuItem.querySelector(buttonSelector);
    var state = toState !== undefined ? toState : button.getAttribute('aria-expanded') !== 'true';
    if (state) {
      if (isDesktopNav()) {
        secondLevelNavMenus.forEach(function (el) {
          el.querySelector(buttonSelector).setAttribute('aria-expanded', 'false');
          el.querySelector('[data-drupal-selector="primary-nav-menu--level-2"]').classList.remove('is-active-menu-parent');
          el.querySelector('[data-drupal-selector="primary-nav-menu-🥕"]').classList.remove('is-active-menu-parent');
        });
      }
      button.setAttribute('aria-expanded', 'true');
      topLevelMenuItem.querySelector('[data-drupal-selector="primary-nav-menu--level-2"]').classList.add('is-active-menu-parent');
      topLevelMenuItem.querySelector('[data-drupal-selector="primary-nav-menu-🥕"]').classList.add('is-active-menu-parent');
    } else {
      button.setAttribute('aria-expanded', 'false');
      topLevelMenuItem.classList.remove('is-touch-event');
      topLevelMenuItem.querySelector('[data-drupal-selector="primary-nav-menu--level-2"]').classList.remove('is-active-menu-parent');
      topLevelMenuItem.querySelector('[data-drupal-selector="primary-nav-menu-🥕"]').classList.remove('is-active-menu-parent');
    }
  }
  Drupal.olivero.toggleSubNav = toggleSubNav;
  function handleBlur(e) {
    if (!Drupal.olivero.isDesktopNav()) return;
    setTimeout(function () {
      var menuParentItem = e.target.closest('[data-drupal-selector="primary-nav-menu-item-has-children"]');
      if (!menuParentItem.contains(document.activeElement)) {
        toggleSubNav(menuParentItem, false);
      }
    }, 200);
  }
  secondLevelNavMenus.forEach(function (el) {
    var button = el.querySelector('[data-drupal-selector="primary-nav-submenu-toggle-button"]');
    button.removeAttribute('aria-hidden');
    button.removeAttribute('tabindex');
    el.addEventListener('touchstart', function () {
      el.classList.add('is-touch-event');
    }, {
      passive: true
    });
    el.addEventListener('mouseover', function () {
      if (isDesktopNav() && !el.classList.contains('is-touch-event')) {
        el.classList.add('is-active-mouseover-event');
        toggleSubNav(el, true);
        setTimeout(function () {
          el.classList.remove('is-active-mouseover-event');
        }, 500);
      }
    });
    button.addEventListener('click', function () {
      if (!el.classList.contains('is-active-mouseover-event')) {
        toggleSubNav(el);
      }
    });
    el.addEventListener('mouseout', function () {
      if (isDesktopNav() && !document.activeElement.matches('[aria-expanded="true"], .is-active-menu-parent *')) {
        toggleSubNav(el, false);
      }
    });
    el.addEventListener('blur', handleBlur, true);
  });
  function closeAllSubNav() {
    secondLevelNavMenus.forEach(function (el) {
      if (el.contains(document.activeElement)) {
        el.querySelector('[data-drupal-selector="primary-nav-submenu-toggle-button"]').focus();
      }
      toggleSubNav(el, false);
    });
  }
  Drupal.olivero.closeAllSubNav = closeAllSubNav;
  function areAnySubNavsOpen() {
    var subNavsAreOpen = false;
    secondLevelNavMenus.forEach(function (el) {
      var button = el.querySelector('[data-drupal-selector="primary-nav-submenu-toggle-button"]');
      var state = button.getAttribute('aria-expanded') === 'true';
      if (state) {
        subNavsAreOpen = true;
      }
    });
    return subNavsAreOpen;
  }
  Drupal.olivero.areAnySubNavsOpen = areAnySubNavsOpen;
  document.addEventListener('keyup', function (e) {
    if (e.key === 'Escape' || e.key === 'Esc') {
      if (isDesktopNav()) closeAllSubNav();
    }
  });
  document.addEventListener('touchstart', function (e) {
    if (areAnySubNavsOpen() && !e.target.matches('[data-drupal-selector="header-nav"], [data-drupal-selector="header-nav"] *')) {
      closeAllSubNav();
    }
  }, {
    passive: true
  });
})(Drupal);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function (Drupal, once) {
  function transitionToDesktopNavigation(navWrapper, navItem) {
    document.body.classList.remove('is-always-mobile-nav');
    if (navWrapper.clientHeight > navItem.clientHeight) {
      document.body.classList.add('is-always-mobile-nav');
    }
  }
  function checkIfDesktopNavigationWraps(entries) {
    var navItem = document.querySelector('.primary-nav__menu-item');
    if (Drupal.olivero.isDesktopNav() && entries[0].contentRect.height > navItem.clientHeight) {
      var navMediaQuery = window.matchMedia("(max-width: ".concat(window.innerWidth + 5, "px)"));
      document.body.classList.add('is-always-mobile-nav');
      navMediaQuery.addEventListener('change', function () {
        transitionToDesktopNavigation(entries[0].target, navItem);
      }, {
        once: true
      });
    }
  }
  function init(primaryNav) {
    if ('ResizeObserver' in window) {
      var resizeObserver = new ResizeObserver(checkIfDesktopNavigationWraps);
      resizeObserver.observe(primaryNav);
    }
  }
  Drupal.behaviors.automaticMobileNav = {
    attach: function attach(context) {
      once('olivero-automatic-mobile-nav', '[data-drupal-selector="primary-nav-menu--level-1"]', context).forEach(init);
    }
  };
})(Drupal, once);;
